version: '3.8'
services:
  api:
    container_name: ${API__HOST}
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./docker/app/Dockerfile
    env_file:
      - .env
    ports:
      - 127.0.0.1:${API__EXT_PORT}:5000
    depends_on:
      - migrations
      - centrifugo
    command: [ "uvicorn", "app:create_app", "--host", "0.0.0.0", "--port", "5000" ]

  postgres:
    container_name: ${POSTGRES__HOST}
    image: "postgres:13.1"
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES_USER=${POSTGRES__USER}
      - POSTGRES_DB=${POSTGRES__DATABASE_NAME}
    ports:
      - 127.0.0.1:${POSTGRES__EXT_PORT}:5432
    volumes:
      - ${POSTGRES__VOLUME}:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES__DATABASE_NAME} -U ${POSTGRES__USER}" ]
      interval: 5s
      timeout: 10s
      retries: 5

  postgres_sub:
    container_name: ${POSTGRES__HOST}__sub
    build:
      context: .
      dockerfile: docker/postgres_sub/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    command: bash -c "bash ./init-db.sh"

  migrations:
    container_name: ${POSTGRES__HOST}_migrations
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres_sub:
        condition: service_completed_successfully
    command: bash -c "poetry run python -m scripts.migrate && poetry run python -m scripts.migrate --testing"

  redis:
    container_name: ${REDIS__HOST}
    build:
      context: .
      dockerfile: docker/redis/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ${REDIS__VOLUME}:/data

  centrifugo:
    container_name: ${CLIENTS__CENTRIFUGO__HOST}
    build:
      context: .
      dockerfile: docker/centrifugo/Dockerfile
    restart: unless-stopped
    volumes:
      - ${CLIENTS__CENTRIFUGO__VOLUME}:/var/log/centrifugo
    ports:
      - 127.0.0.1:${CLIENTS__CENTRIFUGO__PORT}:8000
    env_file:
      - .env
    command: [ "sh", "init-centrifugo.sh" ]


networks:
  default:
    name: ${DOCKER_NETWORK}
    external: true
